@use "sass:map";
@use "sass:list";
@use "sass:math";
@use "sass:string";

/// Задает контентные отступы исходя из конфига
///
/// @param {"left" | "right" | "all"} $side - направление растяжения
@mixin content-container($side: "all") {
    box-sizing: border-box;

    $indent: $content-offset-over-min;

    @if ($side == "all" or $side == "left") {
        padding-left: $indent;
    }

    @if ($side == "all" or $side == "right") {
        padding-right: $indent;
    }

    @each $key, $val in $site-breakpoints {
        @media (min-width: $val) {
            $indent: map.get($content-offsets, $key);

            @if ($side == "all" or $side == "left") {
                padding-left: $indent;
            }

            @if ($side == "all" or $side == "right") {
                padding-right: $indent;
            }
        }
    }
}

// Ограничивает кол-во строчек текста
/* stylelint-disable property-no-vendor-prefix, value-no-vendor-prefix */
@mixin limit-text-lines-count($line-count) {
    -ms-text-overflow: ellipsis;
    -o-text-overflow: ellipsis;
    text-overflow: ellipsis;
    overflow: hidden;
    -ms-line-clamp: $line-count;
    -webkit-line-clamp: $line-count;
    line-clamp: $line-count;
    display: -webkit-box;
    word-wrap: break-word;
    -webkit-box-orient: vertical;
}

/// Задает max-width контента исходя из конфига
@mixin main-container($side: "all") {
    @if ($side == "all") {
        max-width: $main-width-over-min;
    } @else {
        max-width: $main-width-over-min - $content-offset-over-min;
    }

    @each $key, $val in $site-breakpoints {
        @media (min-width: $val) {
            @if ($side == "all") {
                max-width: map.get($main-width, $key);
            } @else {
                max-width: map.get($main-width, $key) - map.get($content-offsets, $key);
            }
        }
    }
}

/// Задает брейкпоинт по ширине
/// @param {breakpoints} $breakpoint - требуемый брейкпоинт из масива брейкпойнтов в конфиге
/// @param {bool} $first-mobile - применять через min-width
@mixin breakpoint($breakpoint, $first-mobile: true) {
    $width: 0;
    $known: map.keys($site-breakpoints);

    @if (map-has-key($site-breakpoints, $breakpoint)) {
        $width: #{map.get($site-breakpoints, $breakpoint)};
    } @else if type-of($breakpoint) == "number" {
        $width: #{$breakpoint};
    }

    @if (0 == $width) {
        @warn "Нет брейкпоинта #{" " + $breakpoint}. Доступные значения: #{$known}.";
    } @else {
        $conditions-block: "(min-width: #{$width})";

        @if ($first-mobile == false) {
            $conditions-block: "(max-width: #{calc($width - 1px)})";
        }

        @media #{$conditions-block} {
            @content;
        }
    }
}

/// Миксин для сетки
///
/// @param {grid-template-value} $template-columns - размер столбцов через grid-template-columns
/// @param {gap} $gap - размер между столбцов через gup
@mixin grid-container($template-columns, $gap: $gutter-size-over-min) {
	display: grid;
	grid-template-columns: $template-columns;
	gap: $gap;

	@each $key, $val in $site-breakpoints {
		@media (min-width: $val) {
			gap: map.get($gutter-size, $key);
		}
	}
}

@mixin font-face($name, $path, $weight: normal, $style: normal, $woff2: false) {
    $src: if($woff2, list.append(null, url($path + ".woff2") format(string.quote("woff2"))), null);
    $src: list.append($src, url($path + ".woff") format(string.quote("woff")), comma);

    @font-face {
        font-family: string.quote($name);
        font-style: $style;
        font-weight: $weight;
        src: $src;
        font-display: swap;
    }
}
