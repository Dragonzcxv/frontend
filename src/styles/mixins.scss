@use "sass:map";
@use "sass:list";
@use "sass:math";
@use "sass:string";

/// Задает максимальную ширину и отступ для блока (с учетом адаптива)
///
/// @param {bool} $margin - делать отступ маржином (true) или падингом (false)
@mixin content-container($margin: false) {
	box-sizing: border-box;
	max-width: $content-width-max;

	$indent: if($margin and map.get($content-padding, "min") == 0, auto, map.get($content-padding, "min"));

	@if ($margin) {
		margin-left: $indent;
		margin-right: $indent;
	} @else {
		padding-left: $indent;
		padding-right: $indent;
	}

	@each $key, $val in $site-breakpoints {
		@media (min-width: $val) {
			@if ($key != "min") {
				$indent: if($margin and map.get($content-padding, $key) == 0, auto, map.get($content-padding, $key));

				@if ($margin) {
					margin-left: $indent;
					margin-right: $indent;
				} @else {
					padding-left: $indent;
					padding-right: $indent;
				}
			}
		}
	}
}

/// Задает резиновые отступы на странице
@mixin main-container() {
	max-width: calc-width("min", map.get($main-padding, "min"));

	@each $key, $val in $site-breakpoints {
		@if ($key != "min") {
			@media (min-width: $val) {
				max-width: calc-width($key, map.get($main-padding, $key));
			}
		}
	}

	margin: 0 auto;
}

/// Задает брекпоинт по ширине
///
/// @param {breakpoints | size} $size - требуемый брейкпоинт
/// @param {"up" | "down"} $direction - направление min-width (up) или max-width (down)
/// @param {"" | "portrait" | "landscape"} $orientation - добавить к условию ориентацию экрана
///
/// @example
/// @include for-width ("max") {
///     width: 50%;
/// }
@mixin for-width($size, $direction: "up", $orientation: "") {
	$media-rule: "";
	$media: "min-width";
	$sizee: "";

	@if ($direction == "down") {
		$media: "max-width";
	}

	@if ($orientation != "") {
		$media-rule: "(orientation: " + $orientation + ") and ";
	}

	@if (map.get($site-breakpoints, $size)) {
		$sizee: map.get($site-breakpoints, $size);
	} @else {
		$sizee: map.get($breakpoints-width, $size);
	}

	@if (not $sizee) {
		$sizee: $size;
	}

	@if ($direction == "up") {
		$sizee: $sizee + 1;
	}

	@media #{$media-rule + "(" + $media + ": " + $sizee + ")"} {
		@content;
	}
}

/// Задает брекпоинт по высоте
///
/// @param {breakpoints | size} $size - требуемый брейкпоинт
/// @param {"up" | "down"} $direction - направление min-height (up) или max-height (down)
/// @param {"" | "portrait" | "landscape"} $orientation - добавить к условию ориентацию экрана
///
/// @example
/// @include for-height ("max") {
///     height: 50rem;
/// }
@mixin for-height($size, $direction: "up", $orientation: "") {
	$media-rule: "";
	$media: "min-height";
	$sizee: "";

	@if ($direction == "down") {
		$media: "max-height";
	}

	@if ($orientation != "") {
		$media-rule: "(orientation: " + $orientation + ") and ";
	}

	@if (map.get($site-breakpoints, $size)) {
		$sizee: map.get($site-breakpoints, $size);
	} @else {
		$sizee: map.get($breakpoints-height, $size);
	}

	@if (not $sizee) {
		$sizee: $size;
	}

	@if ($direction == "up") {
		$sizee: $sizee + 1;
	}

	@media #{$media-rule + "(" + $media + ": " + $sizee + ")"} {
		@content;
	}
}

/// Растягивает элемент на всю ширину окна
///
/// @param {"left" | "right" | "all"} $side - направление растяжения
@mixin layout-negative-margin($side: left) {
	$indent: calc((50vw - 50%) * -1);

	@if ($side == "left") {
		width: calc(100% + ((100vw - 100%) / 2)) !important;
		margin-left: #{$indent} !important;
	}

	@if ($side == "right") {
		width: calc(100% + ((100vw - 100%) / 2)) !important;
		margin-right: #{$indent} !important;
	}

	@if ($side == "all") {
		width: 100vw !important;
		margin-left: #{$indent} !important;
		margin-right: #{$indent} !important;
	}
}

/// Вычесляет половину от любой единицы измерения
/// Используется для вычисления gutter в резиновых отступах
///
/// @param {size} $gutter - резиновый отступ
@function half-gutter($gutter: $gutter-grid) {
	$margin-em-val: strip-unit($gutter);
	$margin-em-unit: math.unit($gutter);
	$margin: math.div($margin-em-val, 2);
	$margin: $margin + $margin-em-unit;

	@return $margin;
}

/// Вычисляет ширину в зависимости от переданных данных
///
/// @param {number | percent | list} $size - требуемый размер
///
/// @example
/// get-width(2); // 50%
/// get-width(20%); // 20%
/// get-width(300px); // 300px
/// get-width(1 of 12); // 8.333%
@function get-width($size: 0) {
	$width: 100%;

	@if ($size != 0) {
		@if (type-of($size) == "number") {
			@if (unit($size) == "") {
				$width: (100 / $size) + "%";
			} @else {
				$width: $size;
			}
		} @else if (type-of($size) == "list") {
			@if (length($size) > 2) {
				$width: math.percentage(math.div(list.nth($size, 1), list.nth($size, 3)));
			}
		}
	}

	@return #{$width};
}

/// Задает контейнеру отрицательные боковые маржины равные половине $gutter
///
/// @param {false | size} $gutter - задает отступ. По умолчанию (false) берёт значение из конфига
/// @param {bool} $top - задавать отступ сверху (true) или нет (false)
@mixin grid-container($gutter: false, $top: false) {
	@if ($gutter == false) {
		@include _grid-container(map.get($gutter-size, "min"), $top);

		@each $key, $val in $site-breakpoints {
			@if ($key != "min") {
				@media (min-width: $val) {
					@include _grid-container(map.get($gutter-size, $key), $top);
				}
			}
		}
	} @else {
		@include _grid-container($gutter, $top);
	}
}

@mixin _grid-container($gutter: false, $top: false) {
	$margin: half-gutter($gutter);

	margin-left: -#{$margin};
	margin-right: -#{$margin};
	width: calc(100% + #{$gutter});

	@if ($top == true) {
		margin-top: -#{$gutter};
	}
}

/// Задает элементу ширину за вычетом $gutter и боковые маржины равные половине $gutter
///
/// @param {size} $size - размер одного элемента
/// @param {false | size} $gutter - задает отступы по брейкпоинтам (false) или постоянный отсутп
/// @param {bool} $gutter-output - задавать отступы (true) или нет (false)
/// @param {bool} $top - задавать отступ сверху (true) или нет (false)
/// @param {false | size} $max-width - ограничение максимальной ширины. По умолчанию отсутствует (false)
@mixin grid-cell($size: 0, $gutter: false, $gutter-output: true, $top: false, $max-width: false) {
	@if ($gutter == false) {
		@include _grid-cell($size, map.get($gutter-size, "min"), $gutter-output, $top, $max-width);

		@each $key, $val in $site-breakpoints {
			@if ($key != "min") {
				@media (min-width: $val) {
					@include _grid-cell($size, map.get($gutter-size, $key), $gutter-output, $top, $max-width);
				}
			}
		}
	} @else {
		@include _grid-cell($size, $gutter, $gutter-output, $top, $max-width);
	}

	@if ($size == "stretch") {
		flex: 1 1 auto;
	} @else {
		flex: 0 0 auto;
	}
}

@mixin _grid-cell($size: 0, $gutter: $gutter-grid, $gutter-output: true, $top: false, $max-width: false) {
	$width: get-width($size);
	$margin: half-gutter($gutter);

	@if ($gutter > 0) {
		$width: calc(#{$width} - #{$gutter});
	}

	@if ($size != "stretch") {
		@if ($max-width) {
			max-width: #{$width};
		} @else {
			width: #{$width};
		}
	}

	@if ($gutter-output) {
		margin-left: #{$margin};
		margin-right: #{$margin};

		@if ($top == true) {
			margin-top: #{$gutter};
		}
	}
}

/// Функция расчета ширины контентной части исходя из отступов основных и резиновых
///
/// @param {breakpoint} $breakpoint - брейкпоинт для которого производится расчёт
/// @param {size} $padding-elastic - размер резинового отступа на заданном брейкпоинте
@function calc-width($breakpoint, $padding-elastic) {
	$window-width: map.get($site-breakpoints, $breakpoint);
	$padding-fixed: map.get($content-padding, $breakpoint);
	$font-size: map.get($font-size, $breakpoint);

	@return $window-width - rem-to-px($padding-fixed, $font-size) * 2 - rem-to-px($padding-elastic) * 2;
}

@mixin font-face($name, $path, $weight: normal, $style: normal, $woff2: false) {
	$src: if($woff2, list.append(null, url($path + ".woff2") format(string.quote("woff2"))), null);
	$src: list.append($src, url($path + ".woff") format(string.quote("woff")), comma);

	@font-face {
		font-family: string.quote($name);
		font-style: $style;
		font-weight: $weight;
		src: $src;
	}
}
